; ModuleID = '/home/erry/Documents/fundament/scopes/types.sc:1'
source_filename = "/home/erry/Documents/fundament/scopes/types.sc:1"

%_Anchor = type opaque
%_Error = type opaque
%Value = type { %__Value*, %_Anchor* }
%__Value = type opaque
%rrbtree-2 = type { i8, { <8 x i8>, [8 x i8] } }
%rrbtree-any = type opaque
%"<FixedArray rrbtree-any x 32>" = type { %rrbtree-any*, i64 }

@"$l8c0db279c3eeed3_1" = external global %_Anchor

define internal void @constructor() {
  ret void, !dbg !4
}

define void @"/home/erry/Documents/fundament/scopes/types.sc:1<>$f8c0db279c3eeed3_1"({ i1, %_Error*, %Value }* sret({ i1, %_Error*, %Value }) %0) !dbg !8 {
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca %Value, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca %Value, i32 0, align 8
  call void @constructor()
  call void @"/home/erry/Documents/fundament/scopes/types.sc:1<>$f8c0db279c3eeed3_2"(), !dbg !10
  %6 = call { i64, i64 } @sc_argument_list_new(i32 0, %Value* %5), !dbg !13
  store { i64, i64 } %6, { i64, i64 }* %4, align 4
  %7 = bitcast { i64, i64 }* %4 to %Value*
  %8 = load %Value, %Value* %7, align 8
  store %Value %8, %Value* %3, align 8
  %9 = bitcast %Value* %3 to { i64, i64 }*
  %10 = getelementptr { i64, i64 }, { i64, i64 }* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 4
  %12 = getelementptr { i64, i64 }, { i64, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 4
  %14 = call { i64, i64 } @sc_valueref_tag(%_Anchor* @"$l8c0db279c3eeed3_1", i64 %11, i64 %13), !dbg !13
  store { i64, i64 } %14, { i64, i64 }* %2, align 4
  %15 = bitcast { i64, i64 }* %2 to %Value*
  %16 = load %Value, %Value* %15, align 8
  %17 = insertvalue { i1, %_Error*, %Value } { i1 true, %_Error* undef, %Value undef }, %Value %16, 2
  store { i1, %_Error*, %Value } %17, { i1, %_Error*, %Value }* %0, align 8
  ret void
}

define void @"/home/erry/Documents/fundament/scopes/types.sc:1<>$f8c0db279c3eeed3_2"() !dbg !14 {
  %1 = alloca %rrbtree-2, align 8
  %2 = alloca { <8 x i8>, [8 x i8] }, align 8
  %3 = alloca { %rrbtree-any*, i64 }, align 8
  %malloccall = tail call i8* @malloc(i32 mul (i32 ptrtoint (%rrbtree-any* getelementptr (%rrbtree-any, %rrbtree-any* null, i32 1) to i32), i32 32))
  %4 = bitcast i8* %malloccall to %rrbtree-any*, !dbg !15
  store { %rrbtree-any*, i64 } zeroinitializer, { %rrbtree-any*, i64 }* %3, align 8
  %5 = bitcast { %rrbtree-any*, i64 }* %3 to %"<FixedArray rrbtree-any x 32>"*
  %6 = load %"<FixedArray rrbtree-any x 32>", %"<FixedArray rrbtree-any x 32>"* %5, align 8
  %7 = insertvalue %"<FixedArray rrbtree-any x 32>" %6, %rrbtree-any* %4, 0
  %8 = insertvalue %"<FixedArray rrbtree-any x 32>" %7, i64 0, 1
  %9 = bitcast { <8 x i8>, [8 x i8] }* %2 to { %"<FixedArray rrbtree-any x 32>" }*
  %10 = insertvalue { %"<FixedArray rrbtree-any x 32>" } zeroinitializer, %"<FixedArray rrbtree-any x 32>" %8, 0
  store { %"<FixedArray rrbtree-any x 32>" } %10, { %"<FixedArray rrbtree-any x 32>" }* %9, align 8
  %11 = bitcast { %"<FixedArray rrbtree-any x 32>" }* %9 to { <8 x i8>, [8 x i8] }*
  %12 = load { <8 x i8>, [8 x i8] }, { <8 x i8>, [8 x i8] }* %11, align 8
  %13 = insertvalue %rrbtree-2 { i8 0, { <8 x i8>, [8 x i8] } undef }, { <8 x i8>, [8 x i8] } %12, 1
  store %rrbtree-2 %13, %rrbtree-2* %1, align 8
  call void @"__drop<(viewof rrbtree-2 1)>$f8c0db279c3eeed3_3"(%rrbtree-2* nonnull byval(%rrbtree-2) %1), !dbg !16
  ret void, !dbg !16
}

declare { i64, i64 } @sc_argument_list_new(i32 %0, %Value* %1)

declare { i64, i64 } @sc_valueref_tag(%_Anchor* %0, i64 %1, i64 %2)

declare noalias i8* @malloc(i32 %0)

define void @"__drop<(viewof rrbtree-2 1)>$f8c0db279c3eeed3_3"(%rrbtree-2* byval(%rrbtree-2) %0) !dbg !18 {
  %2 = alloca %"<FixedArray rrbtree-any x 32>", align 8, !dbg !20
  %3 = alloca { <8 x i8>, [8 x i8] }, align 8, !dbg !20
  %4 = load %rrbtree-2, %rrbtree-2* %0, align 8, !dbg !20
  %5 = extractvalue %rrbtree-2 %4, 0, !dbg !20
  switch i8 %5, label %default [
    i8 0, label %case
  ], !dbg !20

6:                                                ; preds = %case, %default
  ret void, !dbg !21

default:                                          ; preds = %1
  br label %6, !dbg !20

case:                                             ; preds = %1
  %7 = extractvalue %rrbtree-2 %4, 1, !dbg !20
  store { <8 x i8>, [8 x i8] } %7, { <8 x i8>, [8 x i8] }* %3, align 8, !dbg !20
  %8 = bitcast { <8 x i8>, [8 x i8] }* %3 to { %"<FixedArray rrbtree-any x 32>" }*, !dbg !20
  %9 = load { %"<FixedArray rrbtree-any x 32>" }, { %"<FixedArray rrbtree-any x 32>" }* %8, align 8, !dbg !20
  %10 = extractvalue { %"<FixedArray rrbtree-any x 32>" } %9, 0, !dbg !20
  store %"<FixedArray rrbtree-any x 32>" %10, %"<FixedArray rrbtree-any x 32>"* %2, align 8, !dbg !20
  %11 = bitcast %"<FixedArray rrbtree-any x 32>"* %2 to { i64, i64 }*, !dbg !20
  %12 = getelementptr { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !20
  %13 = load i64, i64* %12, align 4, !dbg !20
  %14 = getelementptr { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !20
  %15 = load i64, i64* %14, align 4, !dbg !20
  call void @"__drop<(viewof <FixedArray rrbtree-any x 32> 1)>$f8c0db279c3eeed3_4"(i64 %13, i64 %15), !dbg !21
  br label %6, !dbg !21
}

define void @"__drop<(viewof <FixedArray rrbtree-any x 32> 1)>$f8c0db279c3eeed3_4"(i64 %0, i64 %1) !dbg !5 {
  %3 = alloca { i64, i64 }, align 8, !dbg !4
  %4 = getelementptr { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !4
  store i64 %0, i64* %4, align 4, !dbg !4
  %5 = getelementptr { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !4
  store i64 %1, i64* %5, align 4, !dbg !4
  %6 = bitcast { i64, i64 }* %3 to %"<FixedArray rrbtree-any x 32>"*, !dbg !4
  %7 = load %"<FixedArray rrbtree-any x 32>", %"<FixedArray rrbtree-any x 32>"* %6, align 8, !dbg !4
  %8 = extractvalue %"<FixedArray rrbtree-any x 32>" %7, 1, !dbg !4
  br label %loop, !dbg !4

break:                                            ; preds = %else
  %9 = extractvalue %"<FixedArray rrbtree-any x 32>" %7, 0, !dbg !4
  %10 = bitcast %rrbtree-any* %9 to i8*
  tail call void @free(i8* %10), !dbg !4
  ret void, !dbg !4

loop:                                             ; preds = %then, %2
  %11 = phi i64 [ 0, %2 ], [ %15, %then ], !dbg !4
  %12 = icmp ult i64 %11, %8, !dbg !4
  br i1 %12, label %then, label %else, !dbg !4

then:                                             ; preds = %loop
  %13 = extractvalue %"<FixedArray rrbtree-any x 32>" %7, 0, !dbg !4
  %14 = getelementptr %rrbtree-any, %rrbtree-any* %13, i64 %11, !dbg !4
  %15 = add i64 %11, 1, !dbg !4
  br label %loop, !dbg !4

else:                                             ; preds = %loop
  br label %break, !dbg !4
}

declare void @free(i8* %0)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 1, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C99, file: !2, producer: "scopes", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3)
!2 = !DIFile(filename: "file", directory: "directory")
!3 = !{}
!4 = !DILocation(line: 283, column: 5, scope: !5)
!5 = distinct !DISubprogram(name: "__drop", linkageName: "__drop", scope: !6, file: !6, line: 283, type: !7, scopeLine: 283, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!6 = !DIFile(filename: "Array.sc", directory: "/nix/store/9amz6wyv39d8qdqzshz747w4clrizmny-stdlib/lib/scopes")
!7 = !DISubroutineType(types: !3)
!8 = distinct !DISubprogram(name: "/home/erry/Documents/fundament/scopes/types.sc:1", linkageName: "/home/erry/Documents/fundament/scopes/types.sc:1", scope: !9, file: !9, line: 4274, type: !7, scopeLine: 4274, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!9 = !DIFile(filename: "core.sc", directory: "/nix/store/qn09ydyy69hgc1i61vjqwwgn49yxiqhz-scopes/lib/scopes")
!10 = !DILocation(line: 1, column: 1, scope: !11)
!11 = distinct !DILexicalBlock(scope: !8, file: !12, line: 1, column: 1)
!12 = !DIFile(filename: "types.sc", directory: "/home/erry/Documents/fundament/scopes")
!13 = !DILocation(line: 4277, column: 21, scope: !8)
!14 = distinct !DISubprogram(name: "/home/erry/Documents/fundament/scopes/types.sc:1", linkageName: "/home/erry/Documents/fundament/scopes/types.sc:1", scope: !12, file: !12, line: 1, type: !7, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!15 = !DILocation(line: 1, column: 1, scope: !14)
!16 = !DILocation(line: 3368, column: 34, scope: !17)
!17 = distinct !DILexicalBlock(scope: !14, file: !9, line: 1, column: 1)
!18 = distinct !DISubprogram(name: "__drop", linkageName: "__drop", scope: !19, file: !19, line: 427, type: !7, scopeLine: 427, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !3)
!19 = !DIFile(filename: "enum.sc", directory: "/nix/store/9amz6wyv39d8qdqzshz747w4clrizmny-stdlib/lib/scopes")
!20 = !DILocation(line: 427, column: 13, scope: !18)
!21 = !DILocation(line: 380, column: 27, scope: !18)
unknown:1:1: while executing
error: codegen backend failed: GEP into unsized type!
  %14 = getelementptr %rrbtree-any, %rrbtree-any* %13, i64 %11, !dbg !4

